var express = require('express');
var indexRouter = express.Router();
var templateRouter = require('./templates');
var bootstrap4Router = require('./bootstrap4');
var proRouter = require('./pro');
var adminRouter = require('./admin');
var userRouter = require('./user');
var userControl = require('../controllers/user');
var Category = require("../models/Category");
var Quote = require("../models/Quote");
var requestInfo = require('../lib/request_info');
var fs = require('fs');

indexRouter.get('/', function(req, res, next) {
	//console.log(req.user.local.email);
	res.render('index', { title: 'Danh NgÃ´n', user: req.user });
});
indexRouter.get('/onepixel', function(req, res, next){
	//get request info
	//return image
	requestInfo(req, res, next);	
	
});

indexRouter.get('/quote/:cat/', function(req, res, nex){
	Quote.find({categories: req.params.cat}).select('content author saved_user liked_user tags')
		.exec(function(err, resultQuotes){
			if(err) return next(err);
			//console.log(resultQuotes);
			//console.log("--------");

			if(Object.keys(resultQuotes).length > 0){
				res.render('quote_by_cat',{quotes: resultQuotes, user: req.user});
			}
		});
});
indexRouter.get('/async/quote/:cat/:skip', function(req, res, nex){
	Quote.find({categories: req.params.cat}).limit(6).skip(req.params.skip).select('content author saved_user liked_user tags')
		.exec(function(err, resultQuotes){
			if(err) return next(err);
			//console.log(resultQuotes);
			//console.log("--------");

			if(Object.keys(resultQuotes).length > 0){
				res.render('quote_by_cat',{quotes: resultQuotes, user: req.user});
			}else{
				res.send("0");
			}
		});
});

indexRouter.get('/async/quote/:cat', function(req, res, nex){
	Quote.find({categories: req.params.cat}).limit(6).select('content author saved_user liked_user tags')
		.exec(function(err, resultQuotes){
			if(err) return next(err);
			//console.log(resultQuotes);
			//console.log("--------");

			if(Object.keys(resultQuotes).length > 0){
				res.render('quote_by_cat',{quotes: resultQuotes, user: req.user});
			}
		});

});

module.exports = function(app, passport){

	/*****testing route puppose*****/
	app.use('/templates', templateRouter);
	app.use('/bootstrap4', bootstrap4Router);
	app.use('/pro', proRouter);

	/*-----------------------------*/

	app.use('/', indexRouter);
	app.get('/login',function(req, res){
		/*
		if(req.isAuthenticated()){
			res.redirect('/');
		}else{
			res.render('../views/login', { message: req.flash('loginMessage'), user: req.user });
		}
		*/
		res.render('../views/login', { message: req.flash('loginMessage'), user: req.user });
	});
	app.post('/login', passport.authenticate('local-login', {
		successRedirect : '/', // redirect to the secure profile section
		failureRedirect : '/login', // redirect back to the signup page if there is an error
		failureFlash : true // allow flash messages
	}));

	app.get("/signup",function(req, res){
		res.render('../views/signup',{ message: req.flash('signupMessage'), user: req.user });
	});
	app.post("/signup", passport.authenticate('local-signup', {
		successRedirect : '/user/profile', // redirect to the secure profile section
		failureRedirect : '/signup', // redirect back to the signup page if there is an error
		failureFlash : true // allow flash messages
	}));
	app.get('/logout',function(req, res){
		req.logout();
		res.redirect('/');
	});

	// send to facebook to do the authentication
	app.get('/auth/facebook', passport.authenticate('facebook'));

	// handle the callback after facebook has authenticated the user
	app.get('/auth/facebook/callback',
			passport.authenticate('facebook', {
				successRedirect : '/user/profile',
				failureRedirect : '/login'
			}));

	app.get('/auth/twitter', passport.authenticate('twitter'));
	app.get('/auth/twitter/callback',
			passport.authenticate('twitter', {
				successRedirect : '/user/profile',
				failureRedirect : '/login'
			}));

	//authenticated middleware
	app.all('*',isLoggedIn);

	app.use('/user', userRouter);
	// =============================================================================
	// AUTHORIZE (ALREADY LOGGED IN / CONNECTING OTHER SOCIAL ACCOUNT) =============
	// =============================================================================

	// locally --------------------------------
	app.get('/connect/local', function(req, res) {
		res.render('../views/signup', {user: req.user, message: req.flash('loginMessage') });
	});
	app.post('/connect/local', passport.authenticate('local-signup', {
		successRedirect : '/user/profile', // redirect to the secure profile section
		failureRedirect : '/connect/local', // redirect back to the signup page if there is an error
		failureFlash : true // allow flash messages
	}));

	// facebook -------------------------------

	// send to facebook to do the authentication
	app.get('/connect/facebook', passport.authorize('facebook', { scope : 'email' }));

	// handle the callback after facebook has authorized the user
	app.get('/connect/facebook/callback',
			passport.authorize('facebook', {
				successRedirect : '/user/profile',
				failureRedirect : '/'
			}));

	// twitter --------------------------------

	// send to twitter to do the authentication
	app.get('/connect/twitter', passport.authorize('twitter', { scope : 'email' }));

	// handle the callback after twitter has authorized the user
	app.get('/connect/twitter/callback',
			passport.authorize('twitter', {
				successRedirect : '/user/profile',
				failureRedirect : '/'
			}));


	// google ---------------------------------

	// send to google to do the authentication
	app.get('/connect/google', passport.authorize('google', { scope : ['profile', 'email'] }));

	// the callback after google has authorized the user
	app.get('/connect/google/callback',
			passport.authorize('google', {
				successRedirect : '/user/profile',
				failureRedirect : '/'
			}));

	// =============================================================================
	// UNLINK ACCOUNTS =============================================================
	// =============================================================================
	// used to unlink accounts. for social accounts, just remove the token
	// for local account, remove email and password
	// user account will stay active in case they want to reconnect in the future

	// local -----------------------------------
	app.get('/unlink/local', isLoggedIn, function(req, res) {
		var user            = req.user;
		user.local.email    = undefined;
		user.local.password = undefined;
		user.save(function(err) {
			res.redirect('/user/profile');
		});
	});

	// facebook -------------------------------
	app.get('/unlink/facebook', isLoggedIn, function(req, res) {
		var user            = req.user;
		user.facebook.token = undefined;
		user.save(function(err) {
			res.redirect('/user/profile');
		});
	});

	// twitter --------------------------------
	app.get('/unlink/twitter', isLoggedIn, function(req, res) {
		var user           = req.user;
		user.twitter.token = undefined;
		user.save(function(err) {
			res.redirect('/user/profile');
		});
	});

	// google ---------------------------------
	app.get('/unlink/google', isLoggedIn, function(req, res) {
		var user          = req.user;
		user.google.token = undefined;
		user.save(function(err) {
			res.redirect('/user/profile');
		});
	});

}
// route middleware to ensure user is logged in
function isLoggedIn(req, res, next) {
	if (req.isAuthenticated())
		return next();

	res.redirect('/login');
}

